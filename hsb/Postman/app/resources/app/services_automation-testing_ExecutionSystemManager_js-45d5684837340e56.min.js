exports.ids=["services_automation-testing_ExecutionSystemManager_js"],exports.modules={"./services/automation-testing/ExecutionSystemManager.js":function(e,s,t){let{powerSaveBlocker:o}=t("electron"),{constants:r}=t("os"),{join:i}=t("path"),{SUB_SYSTEM_REQUESTS:n}=t("./services/automation-testing/ScenarioManager/constants.js"),{startSubProcess:a,detachIpcNode:c}=t("./services/automation-testing/sub-process-functions.js"),{isProcessAlive:l}=t("./services/automation-testing/lib/process-management.js"),p=t("./utils/getSystemProxy.js"),{START_WORKER_PROCESS_CHANNEL:u,TERMINATE_WORKER_PROCESS_CHANNEL:m,WORKER_PROCESS_EXITED_CHANNEL:d}=t("./services/automation-testing/constants.js");class S{subProcess=null;_initializing=!1;_initialized=!1;_powerSaveBlockerId=null;_powerSaveBlockerTimeout=null;constructor(){if(S.instance)return S.instance;S.instance=this,this.workerProcesses=new Map}async init({type:e="performance",options:s={}}){let t;if("performance"===e)t="ExecutionProcess.js";else throw Error(`Unknown system type requested: ${e}`);if(this.executionProcess&&!this.isAlive()&&(this.executionProcess=null,this._initializing=!1,this.workerProcesses=new Map),!this.executionProcess&&!this._initializing){let e=r.priority.PRIORITY_NORMAL;this._initializing=!0,this.executionProcess=await a({id:"execution",path:i(__dirname,t),priority:e}),pm.logger.info("[ExecutionSystemManager] Spawned the execution process, pid: ",this.executionProcess.process.pid),this.executionProcess.process.onExit(()=>{pm.logger.info("[ExecutionSystemManager] Execution process is exited"),this.workerProcesses.forEach(e=>{e?.process.isKilled()||e.process.kill()}),this.executionProcess=null,this.workerProcesses=new Map,this._initializing=!1,this._initialized=!1}),this.disposeWorkerCreateSubscription=this.executionProcess.ipcNode.subscribe(u,async e=>{let{id:s,path:t,priority:o,responseChannels:r}=e,i=await a({id:s,path:t,priority:o,attachIPC:!1});i?(i.process.onExit(()=>{pm.logger.info("[ExecutionSystemManager] Worker process is exited, pid: ",i.process.pid),this.executionProcess&&this.executionProcess.ipcNode.send(d,JSON.stringify({pid:i.process.pid}))}),i.process._spawnedProcess.stdout.on("data",e=>{}),i.process._spawnedProcess.stderr.on("data",e=>{pm.logger.error("Received stderr from Execution System",e.toString())}),i.process._spawnedProcess.on("close",e=>{pm.logger.info(`child process exited with code ${e}`)}),this.workerProcesses.set(i.process.pid,i),this.executionProcess&&this.executionProcess.ipcNode.send(r.data,[JSON.stringify({status:"success",pid:i.process.pid})])):this.executionProcess&&this.executionProcess.ipcNode.send(r.error,[JSON.stringify({status:"failed"})])}),this.disposeWorkerTerminateSubscription=this.executionProcess.ipcNode.subscribe(m,e=>{let{pid:s,responseChannels:t}=e,o=this.workerProcesses.get(s);if(o){let e=!o.process.isKilled()&&o.process.kill();this.executionProcess.ipcNode.send(t.data,[JSON.stringify({status:"success",result:e})])}else this.executionProcess.ipcNode.send(t.error,[JSON.stringify({status:"failed"})])}),await this.executionProcess.ipcNode.invoke("ready-execution",s),pm.logger.info("[ExecutionSystemManager] Execution process is ready"),this.disposeSystemRequestSubscription=this.executionProcess.ipcNode.subscribe("system-request",e=>{this.processSystemRequest(e)}),this.executionProcess.process._spawnedProcess.stdout.on("data",e=>{}),this.executionProcess.process._spawnedProcess.stderr.on("data",e=>{pm.logger.error("Received stderr from Execution System",e.toString())}),this.executionProcess.process._spawnedProcess.on("close",e=>{pm.logger.info(`child process exited with code ${e}`)}),this._initializing=!1,this._initialized=!0}}processSystemRequest=async({action:e,data:s})=>{if(e===n.ACTION.ALLOW_SLEEP)this.allowPowerSaver();else if(e===n.ACTION.PREVENT_SLEEP){if(!s?.maxDuration)throw Error("ExecutionSystemManager ~ processSystemRequest: Missing required data for action: preventPowerSaver");let{maxDuration:e}=s;this.preventPowerSaver(e)}else if(e===n.REQUEST.GET_SYSTEM_PROXY){let e=await new Promise(e=>{p(s.url,(s,t)=>{e(t)})});this.executionProcess.ipcNode.send(s.responseChannels.data,[JSON.stringify(e)])}};isAlive(){return this.executionProcess?.process&&l(this.executionProcess.process.pid)}cleanUp(){try{this.executionProcess&&this.executionProcess.ipcNode.invoke("exit").catch(()=>{this.executionProcess?.kill?.()}),this.disposeSystemRequestSubscription?.(),this.disposeWorkerCreateSubscription?.(),this.disposeWorkerTerminateSubscription?.(),this.allowPowerSaver(),this.executionProcess.ipcNode.removeAllListeners(),c(this.executionProcess.ipcNode)}catch(e){pm.logger.error("Error in cleanUp of execution-system manager",e)}}allowPowerSaver=()=>{if(!Number.isFinite(this._powerSaveBlockerId)||!o.isStarted(this._powerSaveBlockerId))return void pm.logger.info("ExecutionSystemManager ~ No actively running power-save-blocker");o.stop(this._powerSaveBlockerId),pm.logger.info("ExecutionSystemManager ~ allowPowerSaver ~ id",this._powerSaveBlockerId),clearTimeout(this._powerSaveBlockerTimeout),this._powerSaveBlockerId=null};preventPowerSaver=e=>{this._powerSaveBlockerId&&(pm.logger.info("ExecutionSystemManager ~ preventPowerSaver: Blocker is already active. Deactivating old lock on power-saver"),this.allowPowerSaver()),this._powerSaveBlockerId=o.start("prevent-display-sleep"),this._powerSaveBlockerTimeout&&(pm.logger.info("ExecutionSystemManager ~ preventPowerSaver: Clearing old timer"),clearTimeout(this._powerSaveBlockerTimeout)),this._powerSaveBlockerTimeout=setTimeout(()=>{this.allowPowerSaver()},e),pm.logger.info(`ExecutionSystemManager ~ preventPowerSaver: Max Duration ${e}`)}}e.exports=S},"./services/automation-testing/ScenarioManager/constants.js":function(e){let s={};s.ELECTRON_MAIN_EVENT="runnerScenarioManager",s.WORKLOAD_MANAGER_EVENT_BUS="workload_manager_event_bus",s.SEQUENCE_EVENT_BUS="sequence_event_bus",s.SCENARIO_EXECUTION_EVENTS={FINISHED:"done",ERROR:"error",STARTED:"start",ABORTED:"aborted",ITERATION_FINISHED:"iteration",ALL_ASSIGNMENTS_COMPLETED:"allRunFinished"},s.EXECUTION_STATES={STARTING:"scenario-starting",STARTED:"scenario-started",START_ERROR:"scenario-start-error",STOPPING:"scenario-stopping",STOPPED:"scenario-stopped",PAUSING:"scenario-pausing",PAUSED:"scenario-paused",FINISHING:"scenario-finishing",FINISHED:"scenario-finished",ITERATION_FINISHED:"iteration-finished",ERROR:"scenario-execution-error",ABORTED:"scenario-aborted"},s.WORKLOAD_STATES={IDLE:"idle",WARMING_UP:"warming-up",READY:"ready",STARTING:"starting",RUNNING:"running",STOPPING:"stopping",STOPPED:"stopped",PAUSING:"pausing",PAUSED:"paused",FINISHING:"finishing",FINISHED:"finished",ERROR:"error",TERMINATING:"terminating",TERMINATED:"terminated"},s.WORKLOAD_ACTIONS={INIT:"init",START:"start",STOP:"stop"},s.WORKLOAD_ALLOWED_ACTIONS={[s.WORKLOAD_STATES.IDLE]:[s.WORKLOAD_ACTIONS.INIT],[s.WORKLOAD_STATES.WARMING_UP]:[],[s.WORKLOAD_STATES.READY]:[s.WORKLOAD_ACTIONS.START],[s.WORKLOAD_STATES.STARTING]:[],[s.WORKLOAD_STATES.STARTED]:[s.WORKLOAD_ACTIONS.STOP],[s.WORKLOAD_STATES.STOPPING]:[],[s.WORKLOAD_STATES.STOPPED]:[],[s.WORKLOAD_STATES.PAUSING]:[],[s.WORKLOAD_STATES.PAUSED]:[s.WORKLOAD_ACTIONS.STOP],[s.WORKLOAD_STATES.FINISHING]:[],[s.WORKLOAD_STATES.FINISHED]:[]},s.SUB_SYSTEM_REQUESTS={ACTION:{PREVENT_SLEEP:"preventPowerSaver",ALLOW_SLEEP:"releasePowerSaver"},REQUEST:{GET_SYSTEM_PROXY:"getSystemProxy"}},s.THREAD_REQUESTS={OAUTH2_TOKEN_REFRESH:"oauth2-token-refresh",GET_SYSTEM_PROXY:"get-system-proxy",VU_DATA:"vu-data"},s.DATAFILE_DISTRIBUTION_TYPES={ORDERED:"ordered",SEQUENTIAL:"sequential",RANDOM:"random"},s.DATAFILE_RANDOM_DISTRIBUTION={SAMPLE_SIZE:10,REFRESH_DATA_INTERVAL:10},e.exports=s},"./services/automation-testing/constants.js":function(e){let s={};s.START_WORKER_PROCESS_CHANNEL="start-perf-test-worker-process",s.TERMINATE_WORKER_PROCESS_CHANNEL="terminate-perf-test-worker-process",s.START_WORKER_PROCESS_RESULT_CHANNEL="worker-processes-start-result",s.TERMINATE_WORKER_PROCESS_RESULT_CHANNEL="worker-processes-terminate-result",s.WORKER_PROCESS_EXITED_CHANNEL="worker-process-exited",e.exports=s},"./services/automation-testing/lib/host/child-processes.js":function(e,s,t){let{exec:o}=t("node:child_process"),{platform:r}=t("node:process"),{log:i}=t("./services/automation-testing/lib/logging.js");e.exports={getChildProcesses:async function(e){let s;return"win32"===r?await new Promise(e=>{try{o("where wmic",{timeout:5e3,windowsHide:!0},(s,t,o)=>{(s||o)&&e(!1),e(!0)})}catch(s){i.error("Error while checking if command is available",s),e(!1)}})?(i.debug("Using wmic to get child processes"),s="wmic process get ParentProcessId,ProcessId"):(s='powershell "Get-CimInstance Win32_Process | select-Object ParentProcessId, ProcessId"',i.debug("Using PowerShell to get child processes")):s="ps -e -o ppid,pid",new Promise((t,r)=>{try{o(s,{timeout:5e3,windowsHide:!0},(s,o,n)=>{if(s||n)i.error("Error while getting child processes",s||n),r(s||n);else{let s=o.trim().split("\n").slice(1).map(e=>{let[s,t]=e.trim().split(/\s+/);return{parentPid:Number(s),pid:Number(t)}}).filter(s=>s.parentPid===e);t(s)}})}catch(e){i.error("Error while getting child processes",e),r(e)}})}}},"./services/automation-testing/lib/host/cpu.js":function(e,s,t){let o=t("os");function r(){let e=o.cpus(),s=0,t=0,r=0,i=0,n=0;for(let o in e)e.hasOwnProperty(o)&&(s+=e[o].times.user,t+=e[o].times.nice,r+=e[o].times.sys,n+=e[o].times.irq,i+=e[o].times.idle);let a=s+t+r+i+n;return{idle:i,total:a}}function i(e,s=!1,t=1e3){let o=r(),n=o.idle,a=o.total;setTimeout(function(){let t=r(),o=t.idle,i=100*(o-n)/(t.total-a);!0===s?e(i):e(100-i)},t)}e.exports={getCPUInformation:function(){return o.cpus().map(({model:e,speed:s})=>({model:e,speed:s}))},getCPUUsage:i,getCPUUsagePromise:(e=1e3,s=!1)=>new Promise(t=>{i(t,s,e)})}},"./services/automation-testing/lib/host/index.js":function(e,s,t){e.exports={processes:t("./services/automation-testing/lib/host/child-processes.js"),cpu:t("./services/automation-testing/lib/host/cpu.js"),memory:t("./services/automation-testing/lib/host/memory.js"),os:t("./services/automation-testing/lib/host/os.js")}},"./services/automation-testing/lib/host/memory.js":function(e,s,t){let o=t("os"),r=t("./node_modules/lodash/lodash.js"),i=t("./node_modules/systeminformation/lib/index.js"),{log:n}=t("./services/automation-testing/lib/logging.js"),{exec:a}=t("node:child_process"),c={cimInstance:'powershell -Command "(Get-CimInstance -ClassName Win32_OperatingSystem).FreePhysicalMemory"',wmiObject:'powershell -Command "(Get-WmiObject -Class Win32_OperatingSystem).FreePhysicalMemory"'};async function l(e){return new Promise((s,t)=>{try{if(!r.has(c,e))throw Error(`getAvailableMemoryByCommand invoked by an invalid command: ${e}`);let o=c[e];a(o,{timeout:1e4,windowsHide:!0},(e,r,i)=>{if(e||i)return n.error("getAvailableMemoryByCommand ~ Error while executing shell command",o,e,i),t(e||i);n.info(`Fetched free physical memory value in KBs using the command ${o}: ${r}`);let a=1024*parseInt(r.trim(),10);return Number.isNaN(a)?t(Error(`Unable to fetch numeric free memory value using the command ${o}`)):0===a?t(Error(`Parsed free memory value is zero using the command ${o}`)):void s(a)})}catch(s){n.error(`getAvailableMemoryByCommand ~ Unable to get memory value via command ${e}`,s?.toString()),t(s)}})}async function p(){try{return await l("cimInstance")}catch(e){try{return n.warn("getAvailableMemoryForWindows ~ falling back to WMI Object while calculating available memory in windows"),await l("wmiObject")}catch(e){return n.warn("getAvailableMemoryForWindows ~ falling back to os module free memory while calculating available memory in windows"),o.freemem()}}}e.exports={getMemoryInformation:async function(){let e=o.totalmem(),s=o.freemem();return{total:e,free:s,used:e-s,active:"win32"===o.platform()?o.totalmem()-o.freemem():r.pick(await i.mem(),["active"]).active,available:"win32"===o.platform()?await p():r.pick(await i.mem(),["available"]).available}}}},"./services/automation-testing/lib/host/os.js":function(e,s,t){let o=t("os");e.exports={getOSInformation:function(){return{platform:o.platform(),release:o.release(),kernel:o.version(),arch:o.arch()}}}},"./services/automation-testing/lib/logging.js":function(e,s,t){let o=t("./node_modules/lodash/lodash.js"),{LOG_LEVELS:r,LOG_LEVEL_ORDER:i,LOG_LEVEL_ORDER_MAP:n}=t("./services/automation-testing/lib/system/constants.js"),a=["SUBSYSTEM_REGISTER","logLevel"],c=n[r.DEBUG],l=new Set([r.INFO,r.WARN,r.ERROR]),p=new Set([r.DEBUG,r.TRACE]),u=new Set([r.CRITICAL,r.FATAL]);function m(){return o.get(global,a,[c,i[c]])}function d(e,s){let[t]=m(),o=n[e],r=pm?.logger||console;o>=t&&(l.has(e)?r[e](s):p.has(e)?r.info(`s[${e}]`,s):u.has(e)?r.error(`s[${e}]`,s):r.warn(`[InvalidLogConfiguration][${e}]`,s))}e.exports={log:{trace:(...e)=>d(r.TRACE,e),debug:(...e)=>d(r.DEBUG,e),info:(...e)=>d(r.INFO,e),warn:(...e)=>d(r.WARN,e),error:(...e)=>d(r.ERROR,e),critical:(...e)=>d(r.CRITICAL,e),fatal:(...e)=>d(r.FATAL,e)},getLogLevel:m,setLogLevel:function(e){let s=n[e];s||(pm.logger.warn("Invalid log level, setting default level logging.",c),e=i[c],s=c),o.set(global,a,[s,e])},logLevelPath:a}},"./services/automation-testing/lib/process-management.js":function(e,s,t){let{processes:o}=t("./services/automation-testing/lib/host/index.js"),r=e=>{try{process.kill(e,"SIGKILL")}catch(e){}};e.exports={isProcessAlive:e=>{let s=!0;if("number"!=typeof e||isNaN(e))throw Error("InvalidParamException - process id should be of type number");try{process.kill(e,0)}catch(e){s=!1}return s},killAllChildProcesses:async e=>{let s=await o.getChildProcesses(e);pm.logger.info("killAllChildProcesses: Found child processes",s.map(({pid:e})=>e)),s.forEach(e=>{r(e.pid),pm.logger.info(`Force killed child process ${e.pid}`)})},killProcess:r}},"./services/automation-testing/lib/system/constants.js":function(e){let s={},t="trace",o="debug",r="info",i="warn",n="error",a="critical",c="fatal";s.LOG_LEVELS={TRACE:t,DEBUG:o,INFO:r,WARN:i,ERROR:n,CRITICAL:a,FATAL:c},s.LOG_LEVEL_ORDER=[t,o,r,i,n,a,c],s.LOG_LEVEL_ORDER_MAP={[t]:0,[o]:1,[r]:2,[i]:3,[n]:4,[a]:5,[c]:6},s.SYSTEM_ERRORS={INSTANCE_NOT_FOUND:"INSTANCE_NOT_FOUND",SYMBOL_NOT_FOUND:"SYMBOL_NOT_FOUND"},e.exports=s},"./services/automation-testing/sub-process-functions.js":function(e,s,t){let o=t("os"),{NodeProcess:r,IPCNode:i}=t("./services/node-process/index.js"),n=e=>new Promise(s=>{let t=new i(e,pm.logger);t.onConnect(()=>{pm.logger.info(`ExecutionSystem ${e} ~ ipc connection successfully established`),s(t)}),t.onClose(()=>{pm.logger.info(`ExecutionSystem ${e} ~ ipc connection closed.`)})}),a=e=>{try{e&&e?.dispose()}catch(e){pm.logger.error("ExecutionSystem ~ Error in detaching IPCNode",e)}};e.exports={attachIpcNode:n,startSubProcess:({id:e,path:s,priority:t,attachIPC:i=!0})=>new Promise((a,c)=>{let l=r.spawn(s,e),p=!1;if(!l){let e=`Failed to spawn the process of the execution system from the path: ${s}`;pm.logger.error(e),c(Error(e));return}l.onError(s=>{pm.logger.error(`ExecutionSystem ${e} ~ Error in starting subprocess`,s),c(s)}),l.onReady(async()=>{o.setPriority(l.pid,t);let s={process:l,...i?{ipcNode:await n(e)}:{}};p=!0,a(s)}),l.onExit((s,t)=>{0!==s&&(pm.logger.error(`ExecutionSystem ${e} ~ subprocess exited with code: ${s}`),t&&pm.logger.error(`ExecutionSystem ${e} ~ sub process exited in response to signal ${t}`)),pm.logger.info(`ExecutionSystem ${e} ~ Sub process terminated with`,s),p||(pm.logger.error(`ExecutionSystem ${e} ~ Failed to start process.`,s,t),c({code:s,signal:t}))})}),detachIpcNode:a,broadcastOnIPC:function(e,s){pm.sdk.ipc.broadcast(e,JSON.stringify(s))},invokeOnIPC:(e,{action:s,method:t,args:o})=>e.invoke(s,{method:t,args:o}),detachIpcNodes:e=>{Object.values(e).forEach(a)}}},"./utils/getSystemProxy.js":function(e,s,t){var o=t("./node_modules/postman-collection/index.js").ProxyConfig,r=t("./services/CloudProxyManager.js"),i="http",n=[i,"https"].join("|"),a=i+"://";e.exports=(e,s)=>{t("electron").session.defaultSession;var i,c,l,p,u,m,d,S={hostPortMatcher:/(PROXY|SOCKS\d*)\s+(([^:]+):(\d+))/,validUrlTester:"^("+n+")://"},g=e.match(S.validUrlTester)?e:a+e,E=g.split("://")[0];try{r.resolveProxy(g,(e,t,r)=>{if(e&&s(e),"DIRECT"===t)return s(null,void 0);if(!(i=t.match(S.hostPortMatcher)))return pm.logger.warn("getSystemProxy - System proxy defined has invalid syntax"),s(null,void 0);p=i[1],c=i[3],l=parseInt(i[4],10),r&&(u=!0,m=r.username,d=r.password);let n={host:c,port:l,protocols:[E],authenticate:u,username:m,password:d};return p&&p.startsWith("SOCKS")&&(n.protocol=p.toLowerCase()),s(null,new o(n))})}catch(e){return s(e)}}}};