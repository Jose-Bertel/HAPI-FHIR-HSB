exports.ids=["services_TrackManagementService_js"],exports.modules={"./services/TrackManagementService.js":function(e,t,a){let r=pm.sdk.IPC,s=a("./utils/appSettingsUtils.js"),i=pm.logger.getContext("TrackManagementService","client-distribution");e.exports=new class{initialize(){try{this.eventBus=pm.eventBus.channel("track-management"),this.setupListeners(),pm.logger.info("TrackManagementService: Initialized successfully")}catch(e){pm.logger.error("TrackManagementService: Initialization failed ",e,{context:i})}}async updateDesktopUITrack(e){if(!e)return void pm.logger.info("TrackManagementService~updateDesktopUITrack: Desktop UI track name is empty");try{pm.logger.info("TrackManagementService~updateDesktopUITrack: Updating the desktop UI track name in the app settings.",e),await s.setAppSettings("trackName",e)}catch(e){pm.logger.error("TrackManagementService~updateDesktopUITrack: track update failed ",e,{context:i})}}async resetDesktopUITrack(){pm.logger.info("TrackManagementService~resetDesktopUITrack: Removing the active desktop UI track from the app settings.");try{await s.setAppSettings("trackName","")}catch(e){pm.logger.error("TrackManagementService~resetDesktopUITrack: track reset failed ",e,{context:i})}}setupListeners(){pm.logger.info("TrackManagementService~setupListeners: Setting listeners to manage desktop UI track"),r.subscribe("setDesktopUITrack",async(e,t)=>{await this.updateDesktopUITrack(t)}),r.subscribe("removeDesktopUITrack",async()=>{await this.resetDesktopUITrack()})}}}};