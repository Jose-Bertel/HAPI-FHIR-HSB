(()=>{var e={"./preload/common/index.js":function(e){window=window||{},e.exports={isElectron:()=>!!("undefined"!=typeof process&&"object"==typeof process.versions&&process.versions.electron||"object"==typeof navigator&&"string"==typeof navigator.userAgent&&navigator.userAgent.toLowerCase().indexOf("electron")>=0)}},"./preload/desktop/file-path.js":function(e,t,s){let{webUtils:r}=s("electron");e.exports={augmentWithFilePath:function(e){e instanceof File&&(e.path??=r.getPathForFile(e))}}},"./preload/desktop/ipc.js":function(e,t,s){let r=s("electron").ipcRenderer;e.exports=new class{subscribe(e,t){return r.on(e,t),function(){r.removeListener(e,t)}}send(e,...t){try{r.send(e,...t)}catch(o){let s;pm.logger.error("IPC Renderer: Bad usage of IPC send",{channel:e,args:t,err:o});try{s=JSON.parse(JSON.stringify(t)),r.send(e,...s)}catch(t){pm.logger.error("IPC Renderer: Bad usage of IPC, cannot stringify circular/BigInt referenced object",{channel:e,newArgs:s,error:t})}}}sendToHost(e,...t){try{r.sendToHost(e,...t)}catch(o){let s;pm.logger.error("IPC Renderer: Bad usage of IPC",{channel:e,args:t,err:o});try{s=JSON.parse(JSON.stringify(t)),r.sendToHost(e,...s)}catch(t){pm.logger.error("IPC Renderer: Bad usage of IPC, cannot stringify circular/BigInt referenced object",{channel:e,newArgs:s,error:t})}}}sendSync(e,...t){pm.logger.warn("Sending synchronous messages over IPC is deprecated!! We recommend you to move your usage to asynchronous messaging over IPC");try{return r.sendSync(e,...t)}catch(o){let s;pm.logger&&pm.logger.error&&pm.logger.error("IPC Renderer: Bad usage of IPC",{channel:e,args:t,err:o});try{return s=JSON.parse(JSON.stringify(t)),r.sendSync(e,...s)}catch(t){pm.logger.error("IPC Renderer: Bad usage of IPC, cannot stringify circular/BigInt referenced object",{channel:e,newArgs:s,error:t})}}}invoke(e,...t){return r.invoke(e,...t).catch(s=>{if("An object could not be cloned."===s.message){let o;pm.logger&&pm.logger.error&&pm.logger.error("IPC Renderer: Bad usage of IPC",{channel:e,args:t,err:s});try{return o=JSON.parse(JSON.stringify(t)),r.invoke(e,...o)}catch(t){pm.logger.error("IPC Renderer: Bad usage of IPC, cannot stringify circular/BigInt referenced object",{channel:e,newArgs:o,error:t})}}return Promise.reject(s)})}}},"./services/node-process/Channel.js":function(e,t,s){let{EventEmitter:r}=s("events"),{PMBuffer:o}=s("./services/node-process/PMBuffer.js"),{serialize:n,deserialize:i}=s("./services/node-process/serialization.js");e.exports={CommunicationChannel:class extends r{constructor(e,t){super(),this.protocol=e,this._logger=t,this.protocol.onMessage(e=>this.onBuffer(e)),this.protocol.onClose(()=>this.emit("close"))}dispose(){this.protocol.dispose()}send(e){let t=o.wrap(n(e,this._logger));return this.sendBuffer(t)}onMessage(e){return this.on("message",e),{dispose:()=>this.removeListener("message",e)}}sendBuffer(e){try{return this.protocol.send(e),e.byteLength}catch(e){return 0}}onBuffer(e){let t=i(e,this._logger);this.emit("message",t)}onClose(e){return this.on("close",e),{dispose:()=>this.removeListener("close",e)}}}}},"./services/node-process/IPCNode.js":function(e,t,s){let{EventEmitter:r}=s("events"),{getIPCHandle:o,getResponseChannels:n}=s("./services/node-process/ipcUtils.js"),{createConnection:i}=s("net"),{NodeSocket:c}=s("./services/node-process/NodeSocket.js"),{Protocol:a}=s("./services/node-process/Protocol.js"),{CommunicationChannel:h}=s("./services/node-process/Channel.js");e.exports={IPCNode:class extends r{constructor(e,t){var s;super(),this._logger=t,this.namedPipe=o(e),(s=this.namedPipe,new Promise((e,t)=>{let r=i(s,()=>{r.removeListener("error",t),e(r)});r.once("error",t)})).then(e=>{let t=new a(new c(e,this._logger),this._logger);this._commChannel=new h(t,this._logger),this._commChannel.onMessage(e=>{"error"!==e.channel&&this.emit(e.channel,...e.args)}),this._commChannel.onClose(()=>{this.emit("close")}),this.emit("connect")}).catch(e=>{this._logger.error("IPCNode~createClient~something wrong connecting to the IPC server",e)}),this.on("error",e=>{this._logger.error("IPCNode~something is wrong",e)})}dispose(){this._commChannel.dispose()}onConnect(e){return this.on("connect",e),()=>{this.removeListener("connect",e)}}onClose(e){return this.on("close",e),()=>{this.removeListener("close",e)}}subscribe(e,t){return this.on(e,t),()=>{this.removeListener(e,t)}}subscribeOnce(e,t){let s=this.subscribe(e,(...e)=>{s(),t(...e)})}send(e,...t){return this._commChannel.send({channel:e,args:t})}invoke(e,...t){let s,r,o=new Promise((o,i)=>{let c=n(e);t.push(c),s=this.subscribe(c.data,e=>(s?.(),r?.(),o(e))),r=this.subscribe(c.error,e=>(s?.(),r?.(),i(e)))});return this.send(e,...t),o}}}},"./services/node-process/NodeSocket.js":function(e,t,s){let{PMBuffer:r}=s("./services/node-process/PMBuffer.js");e.exports={NodeSocket:class{constructor(e,t){this.socket=e,this._logger=t}dispose(){try{this.socket.destroy()}catch(e){this._logger.error("NodeSocket~dispose~Could not destroy socket",e)}}onData(e){let t=t=>e(r.wrap(t));return this.socket.on("data",t),{dispose:()=>this.socket.off("data",t)}}onClose(e){return this.socket.on("close",e),{dispose:()=>this.socket.off("close",e)}}write(e){if(!this.socket.destroyed)try{this.socket.write(e.buffer)}catch(e){if("EPIPE"===e.code)return;this._logger.error("NodeSocket~write~Failedto write data",e)}}end(){try{this.socket.end()}catch(e){this._logger.error("NodeSocket~end~Could not end socket",e)}}}}},"./services/node-process/PMBuffer.js":function(e){class t{static alloc(e){return new t(Buffer.allocUnsafe(e))}static wrap(e){return Buffer.isBuffer(e)||(e=Buffer.from(e.buffer,e.byteOffset,e.byteLength)),new t(e)}static concat(e,s){if(void 0===s){s=0;for(let t=0,r=e.length;t<r;t++)s+=e[t].byteLength}let r=t.alloc(s),o=0;for(let t=0,s=e.length;t<s;t++){let s=e[t];r.set(s,o),o+=s.byteLength}return r}constructor(e){this.buffer=e,this.byteLength=this.buffer.byteLength}slice(e=0,s){return new t(this.buffer.subarray(e,s))}set(e,s){e instanceof t?this.buffer.set(e.buffer,s):this.buffer.set(e,s)}readUInt32BE(e){var t;return 0x1000000*(t=this.buffer)[e]+65536*t[e+1]+256*t[e+2]+t[e+3]}writeUInt32BE(e,t){var s,r;s=this.buffer,r=e,s[t+3]=r,r>>>=8,s[t+2]=r,r>>>=8,s[t+1]=r,r>>>=8,s[t]=r}}e.exports={PMBuffer:t}},"./services/node-process/Protocol.js":function(e,t,s){let{EventEmitter:r}=s("events"),{PMBuffer:o}=s("./services/node-process/PMBuffer.js"),n=null;class i{get byteLength(){return this._totalLength}constructor(){this._chunks=[],this._totalLength=0}acceptChunk(e){this._chunks.push(e),this._totalLength+=e.byteLength}read(e){if(0===e)return n||(n=o.alloc(0)),n;if(e>this._totalLength)throw Error("Cannot read so many bytes!");if(this._chunks[0].byteLength===e){let t=this._chunks[0];return this._chunks.shift(),this._totalLength-=e,t}if(this._chunks[0].byteLength>e){let t=this._chunks[0].slice(0,e);return this._chunks[0]=this._chunks[0].slice(e),this._totalLength-=e,t}let t=o.alloc(e),s=0;for(;e>0;){let r=this._chunks[0];if(r.byteLength>e){let o=r.slice(0,e);t.set(o,s),s+=e,this._chunks[0]=r.slice(e),this._totalLength-=e,e-=e}else t.set(r,s),s+=r.byteLength,this._chunks.shift(),this._totalLength-=r.byteLength,e-=r.byteLength}return t}}class c extends r{constructor(e,t){super(),this._socket=e,this._logger=t,this._isDisposed=!1,this._incomingData=new i,this._socket.onData(e=>this.acceptChunk(e)),this._state={readLen:4,readHead:!0}}onMessage(e){return this.on("message",e),{dispose:()=>this.removeListener("message",e)}}acceptChunk(e){if(e&&0!==e.byteLength)for(this._incomingData.acceptChunk(e);this._incomingData.byteLength>=this._state.readLen;){let e=this._incomingData.read(this._state.readLen);if(this._state.readHead)this._state.readHead=!1,this._state.readLen=e.readUInt32BE(0);else if(this._state.readHead=!0,this._state.readLen=4,this.emit("message",o.wrap(e)),this._isDisposed)break}}dispose(){this._isDisposed=!0}}class a{constructor(e){this._isDisposed=!1,this._socket=e,this._data=[],this._totalLength=0}dispose(){this.flush(),this._isDisposed=!0}flush(){this._writeNow()}write(e){if(this._isDisposed)return;let t=o.alloc(4);t.writeUInt32BE(e.byteLength,0),this._writeSoon(t,e)}_bufferAdd(e,t){let s=0===this._totalLength;return this._data.push(e,t),this._totalLength+=e.byteLength+t.byteLength,s}_bufferTake(){let e=o.concat(this._data,this._totalLength);return this._data.length=0,this._totalLength=0,e}_writeSoon(e,t){this._bufferAdd(e,t)&&setImmediate(()=>{this._writeNow()})}_writeNow(){0!==this._totalLength&&this._socket.write(this._bufferTake())}}e.exports={Protocol:class extends r{constructor(e){super(),this._socket=e,this._socketWriter=new a(this._socket),this._socketReader=new c(this._socket),this._socketReader.onMessage(e=>{this.emit("message",e)}),this._socket.onClose(()=>this.emit("close"))}dispose(){this._socketReader.dispose(),this._socketWriter.dispose(),this._socket.dispose()}onMessage(e){return this.on("message",e),{dispose:()=>this.removeListener("message",e)}}getSocket(){return this._socket}send(e){this._socketWriter.write(e)}onClose(e){return this.on("close",e),{dispose:()=>this.removeListener("close",e)}}}}},"./services/node-process/ipcUtils.js":function(e,t,s){let r=s("path"),{getUserDataDirectory:o}=s("./services/node-process/pathUtils.js");e.exports={getIPCHandle:function(e){let t=o();return"win32"===process.platform?`\\\\.\\pipe\\${e}-sock`:r.join(t,`${e}.sock`)},getResponseChannels:function(e){let t=process.hrtime.bigint();return{data:`${e}-data-channel-${t}`,error:`${e}-error-channel-${t}`}}}},"./services/node-process/pathUtils.js":function(e,t,s){let r=s("path"),o=s("os");function n(){return"Postman"}function i(){switch(o.platform()){case"darwin":return r.resolve(o.homedir(),"Library","Application Support",n());case"win32":return r.resolve(process.env.APPDATA,n());case"linux":return r.resolve(o.homedir(),".config",n())}}e.exports={getLogPath:function(){return r.resolve(i(),"logs")},getExecPath:function(){return process.execPath},getUserDataDirectory:i,getEntryModulePath:function(e){if("renderer"!==process.type)return e;let t=s("electron").app;return r.resolve(r.join(t.getAppPath(),e))}}},"./services/node-process/serialization.js":function(e,t,s){let r=s("v8");e.exports={serialize:function(e,t){try{return r.serialize(e)}catch(s){return t.error("serialization~serialize~Failed to serialize the IPC message",s),Buffer.from(JSON.stringify(e))}},deserialize:function(e,t){try{return r.deserialize(e.buffer)}catch(s){return t.error("serialization~deserialize~Failed to deserialize the IPC message",s),JSON.parse(e.buffer)}}}},electron:function(e){"use strict";e.exports=require("electron")},events:function(e){"use strict";e.exports=require("events")},net:function(e){"use strict";e.exports=require("net")},os:function(e){"use strict";e.exports=require("os")},path:function(e){"use strict";e.exports=require("path")},v8:function(e){"use strict";e.exports=require("v8")}},t={};function s(r){var o=t[r];if(void 0!==o)return o.exports;var n=t[r]={exports:{}};return e[r](n,n.exports,s),n.exports}s.ab=__dirname+"/node_modules/native_modules/",(()=>{let e=s("./preload/common/index.js"),{IPCNode:t}=s("./services/node-process/IPCNode.js"),r=s("./preload/desktop/ipc.js"),{augmentWithFilePath:o}=s("./preload/desktop/file-path.js"),n=Object.assign({},e,{IPC:r,IPCNode:t,augmentWithFilePath:o});global.pm=global.pm||{sdk:n,logger:{info:console.info.bind(console),warn:console.warn.bind(console),error:console.error.bind(console),getContext:function(e,t){return{api:e,domain:t}}}}})(),module.exports={}})();