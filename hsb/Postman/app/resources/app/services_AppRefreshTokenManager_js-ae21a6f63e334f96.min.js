exports.ids=["services_AppRefreshTokenManager_js"],exports.modules={"./services/AppRefreshTokenManager.js":function(e,r,s){let n=s("./node_modules/uuid/index.js");class a{refreshCallbackMap=new Map;timeout=3e4;constructor(){this.refreshToken=this.refreshToken.bind(this),pm.eventBus.channel("oauth2-ipc-event").subscribe(({name:e,namespace:r,data:s})=>{if("oauth2-refresh-token"!==r||"oauth2-token-refreshed"!==e)return;let{refreshId:n}=s,a=this.refreshCallbackMap.get(n);return a?(this.refreshCallbackMap.delete(n),s.error)?a(Error(s.error)):s.accessToken?a(null,s.accessToken):(pm.logger.error("main~RefreshTokenManager~refreshToken: No Access Token Received"),a(Error("No Access Token Received"))):void pm.logger.warn("main~RefreshTokenManager~refreshToken: No callback found for refreshId",n)})}cancelRefresh(e){pm.eventBus.channel("oauth2-ipc-event").publish({name:"oauth2-cancel-refresh-token",namespace:"oauth2-refresh-token",data:{error:e}})}async refreshToken(e,r){let s=n.v4();this.refreshCallbackMap.set(s,r),pm.eventBus.channel("oauth2-ipc-event").publish({name:"oauth2-refresh-token",namespace:"oauth2-refresh-token",data:{authSessionId:e,refreshId:s}});let a=new Promise((e,r)=>{setTimeout(()=>r(),this.timeout)});await a.catch(()=>{let e=this.refreshCallbackMap.get(s);if(e)return this.refreshCallbackMap.delete(s),this.cancelRefresh(Error("Timeout while refreshing token")),e(Error("Timeout while refreshing token"))})}}e.exports={initialize:function(){pm.refreshTokenManager=new a}}}};