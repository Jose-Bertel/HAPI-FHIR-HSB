exports.ids=["Agent"],exports.modules={"./agent/agent-interface-methods.js":function(e,t,s){let n=s("electron"),r=n.app,i=n.dialog,o=n.session,a=s("os"),l=s("./utils/getSystemProxy.js"),c=s("./services/sendAnalytics.js");e.exports={"app.getPath":async e=>r.getPath(e),"os.homeDir":async()=>a.homedir(),"app.focus":async()=>r.focus(),"dialog.showSaveDialog":async e=>i.showSaveDialog(e),"logger.write":async(e,t)=>pm.logger[e](...t),"proxy.resolve":e=>new Promise((t,s)=>{l(e,(e,n)=>{if(e)return s(e);t(n)})}),"analytics.sendEvent":async e=>{c(e.category,e.action,e.label,e.meta)},"app.clearStorageData":async(e,t)=>{if(e)return o.fromPartition(e).clearStorageData(t)}}},"./agent/agent-interface-server.js":function(e){e.exports={initialize:async function(e,t){let s=async(e,s)=>{if(!t[e])throw Error("Method not implemented: "+e);return t[e](...s)};e.receive(t=>{let{id:n,method:r,args:i}=t;s(r,i).then(t=>e.send({id:n,result:t})).catch(t=>e.send({id:n,error:t}))})}}},"./agent/index.js":function(e,t,s){let n=s("./node_modules/uuid/v4.js"),r=s("./agent/transport/TransportServer.js"),i=s("./agent/transport/TransportClient.js"),{createDeferredPromise:o}=s("./agent/util/deferred-promise.js"),a=s("./agent/spawn-agent-process.js");e.exports={start:async function(){(e=>{let t=new r,s=[];return pm.sdk.IPC.subscribe(e,async(n,r)=>{let i=r.client;if("connect"===r.op){let r=n.reply.bind(n,e);return await t.newSession(e=>(s[i.id]=e,{send:e=>r({op:"message",client:i,data:e}),close:e=>{r({op:"disconnect",client:i,data:{reason:e}}),delete s[i.id]}})),r({op:"connect-ack",client:i})}if("disconnect"===r.op){if(!s[i.id])return;s[i.id].destroy(),delete s[i.id]}else if("message"===r.op){if(!s[i.id])return;s[i.id].receive(r.data)}}),t})("agent2").chain({onNewSession:(e=>{let t=null,s=new Map;return async()=>(t||(t=a(e,e=>{let{client:t,op:n,data:r}=e;"connect-ack"===n?s.has(t.id)&&s.get(t.id).handshake.resolve():"disconnect"===n?(s.has(t.id)&&s.get(t.id).controller.destroy(),s.delete(t.id)):"message"===n&&s.has(t.id)&&s.get(t.id).controller.receive(r)})),new i(async e=>{let r=n(),i=o(5e3);return s.set(r,{controller:e,handshake:i}),t.send({op:"connect",client:{id:r}}),await i.promise.catch(e=>{throw Error("Failed to connect to agent: "+e.message)}),{send:e=>t.send({op:"message",client:{id:r},data:e}),close:e=>{t.send({op:"disconnect",client:{id:r},data:{reason:e}}),s.delete(r)}}}))})("agent")})}}},"./agent/spawn-agent-process.js":function(e,t,s){let n=s("./agent/agent-interface-server.js"),r=s("./agent/agent-interface-methods.js"),i=null,o=e=>{let{Worker:t}=s("worker_threads"),a=s("path"),l=s("electron").app;(i=new t(a.join(l.getAppPath(),"AgentWorker.js"))).on("error",t=>{pm.logger.error("Agent.spawnAgentProcess: error",t),pm.logger.info("Agent.spawnAgentProcess: restarting agent process"),i.removeAllListeners(),o(e)}),i.on("exit",t=>{if(0!==t&&pm.logger.error("Agent.spawnAgentProcess: process exited with code",t),2===t)return void pm.logger.error("Agent.spawnAgentProcess: process exited with code 2, indicating an error during initialization");pm.logger.info("Agent.spawnAgentProcess: restarting agent process"),i.removeAllListeners(),o(e)}),i.on("message",e);let c="agent-interface";n.initialize({receive:async e=>{i.on("message",({channel:t,event:s})=>{t===c&&e(s)})},send:async e=>{i.postMessage({channel:c,event:e})}},r)};e.exports=(e,t)=>(o(({channel:s,event:n})=>{s===e&&t(n)}),{send:t=>i.postMessage({channel:e,event:t})})},"./agent/transport/TransportClient.js":function(e,t,s){let n=s("./node_modules/uuid/v4.js"),{createDeferredPromise:r}=s("./agent/util/deferred-promise.js");e.exports=class{constructor(e){this._pendingRequests=new Map,this._getSession=this._initializeOnce.bind(this,e)}_initializeOnce(e){return this._initializationPromise||(this._initializationPromise=r(5e3),Promise.resolve(e({receive:e=>{let{id:t,op:s}=e;if("event"===s){let{namespace:t,event:s}=e.data;this._listener&&this._listener(t,s);return}let n=this._pendingRequests.get(t);n&&(this._pendingRequests.delete(t),"res"===s?n.resolve(e.data):"error"===s&&n.reject(e.error))},destroy:()=>{this._pendingRequests.forEach(e=>{e.reject(Error("Session closed"))}),this._pendingRequests.clear(),this._initializationPromise.reject(Error("Session closed")),this._initializationPromise=null}})).then(e=>this._initializationPromise.resolve(e),e=>this._initializationPromise.reject(e))),this._initializationPromise.promise}async invoke(e,t){let s=await this._getSession(),i=n(),o=r();return this._pendingRequests.set(i,o),s.send({id:i,op:"req",data:{op:e,data:t}}),o.promise}listen(e){this._listener=e}}},"./agent/transport/TransportServer.js":function(e,t,s){let n=s("./node_modules/uuid/v4.js");class r{_handlers=new Map;_clientSessions=new Set;async newSession(e){let t={_id:n(),_session:{},receive:e=>{},destroy:()=>{}};return Promise.resolve(e(t)).then(e=>{this._clientSessions.add(e),t.receive=async s=>{let{id:n,op:r}=s,i=t=>e.send({id:n,op:"error",error:t});if("req"===r){let{op:r,data:o}=s.data,a=this._handlers.get(r);if(!a)return i(Error("unknown operation"));Promise.resolve(a(o,{send:(t,s)=>{let r;return r={namespace:t,event:s},e.send({id:n,op:"event",data:r})},client:{id:t._id},session:t._session})).then(t=>e.send({id:n,op:"res",data:t}),i)}else console.log("TransportServer: unknown operation",r)},t.destroy=()=>{this._clientSessions.delete(e)}})}handle(e){for(let[t,s]of Object.entries(e))this._handlers.set(t,s)}chain({onNewSession:e}){this.newSession=async t=>{let s={receive:e=>{},destroy:()=>{}},n=await e(),r=await t(s);this._clientSessions.add(r),s.receive=e=>{let{id:t,op:s}=e;if(n.listen((e,s)=>{let n;return n={namespace:e,event:s},r.send({id:t,op:"event",data:n})}),"req"===s){let{op:s,data:i}=e.data;n.invoke(s,i).then(e=>r.send({id:t,op:"res",data:e}),e=>r.send({id:t,op:"error",error:e}))}},s.destroy=()=>{this._clientSessions.delete(r)}}}shutdown(){for(let e of this._clientSessions)e.close("Server shutdown");this._clientSessions.clear(),this._handlers.clear()}}e.exports=r},"./agent/util/deferred-promise.js":function(e){e.exports={createDeferredPromise:function(e){let t,s,n=new Promise((e,n)=>{t=e,s=n});return e&&setTimeout(()=>{s(Error("timeout"))},e),{promise:n,resolve:t,reject:s}}}},"./utils/getSystemProxy.js":function(e,t,s){var n=s("./node_modules/postman-collection/index.js").ProxyConfig,r=s("./services/CloudProxyManager.js"),i="http",o=[i,"https"].join("|"),a=i+"://";e.exports=(e,t)=>{s("electron").session.defaultSession;var i,l,c,d,p,g,h,u={hostPortMatcher:/(PROXY|SOCKS\d*)\s+(([^:]+):(\d+))/,validUrlTester:"^("+o+")://"},m=e.match(u.validUrlTester)?e:a+e,f=m.split("://")[0];try{r.resolveProxy(m,(e,s,r)=>{if(e&&t(e),"DIRECT"===s)return t(null,void 0);if(!(i=s.match(u.hostPortMatcher)))return pm.logger.warn("getSystemProxy - System proxy defined has invalid syntax"),t(null,void 0);d=i[1],l=i[3],c=parseInt(i[4],10),r&&(p=!0,g=r.username,h=r.password);let o={host:l,port:c,protocols:[f],authenticate:p,username:g,password:h};return d&&d.startsWith("SOCKS")&&(o.protocol=d.toLowerCase()),t(null,new n(o))})}catch(e){return t(e)}}}};