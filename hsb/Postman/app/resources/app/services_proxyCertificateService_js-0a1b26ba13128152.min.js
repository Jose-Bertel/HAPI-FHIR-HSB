exports.ids=["services_proxyCertificateService_js"],exports.modules={"./services/proxyCertificateService.js":function(e,t,r){let i,n=r("./node_modules/async/lib/async.js").waterfall,a=r("fs"),o=r("path"),s=r("./node_modules/async/lib/async.js").parallel,c=r("./node_modules/lodash/lodash.js"),{getConfig:l}=r("./services/AppConfigService.js"),y=l("__WP_RELEASE_CHANNEL__"),u=r("./constants/ProxyConstants.js"),{generateRootCa:f,getCertInfo:p}=r("./services/proxyCertificateUtil.js"),d=r("./node_modules/node-forge/lib/index.js"),m=u.COMMON_NAME[y]||u.COMMON_NAME.prod;async function g(e,t){let{keyBitSize:r,certOptions:s}=e,{rootCALocation:l,certMapFile:y}=e.locationMeta,p={},d=!1,g=o.resolve(l,`${u.CA_SUFFIX_NAME}.crt`),k=o.resolve(l,`${u.CA_SUFFIX_NAME}.key`),x=!1;try{a.existsSync(g)&&a.existsSync(k)||(x=!0),await S(g,k,!0)&&(x=!0)}catch(e){x=!0}if(x)try{a.existsSync(g)&&a.unlinkSync(g),a.existsSync(k)&&a.unlinkSync(k),await i.deleteCertificates(t,y,!0,!1),p=await function(e,t){let r={attr:[{name:"commonName",value:m},{name:"countryName",value:u.COUNTRY}],options:{keySize:2048,algorithm:u.HASH,days:u.DAYSTOEXPIRY,extensions:[{name:"basicConstraints",cA:!0}]}};return new Promise((e,i)=>{n([e=>{f(r.attr,r.options,t,(t,r)=>t?e(t):e(null,{cert:r.certificate,key:r.clientKey}))}],(t,r)=>t?(pm.logger.error("Error encountered while creating root CA",t),i(t)):e(r))})}(r,s),a.existsSync(l)||a.mkdirSync(o.resolve(g,"..")),a.writeFileSync(g,p.cert,{flag:"wx"}),a.writeFileSync(k,p.key,{flag:"wx"}),pm.logger.info("proxyCertificateService~ensureRootCAPresence: Deleting and creating new certificates"),d=!0}catch(e){throw Error("Unable to regenerate new certificates",e)}else{d=!1;try{p=await v(g,k)}catch(e){throw Error("Unable to read root certificate")}}return{rootCA:c.pick(p,"key","cert"),certsRegenerated:d}}function S(e,t,r){return new Promise((i,n)=>{a.readFile(o.resolve(e),"utf8",(c,l)=>{c?(console.log("error reading file"+c),n(c)):p(l,(c,l)=>{c?(console.log("Error reading certificate",c),n(c)):new Date(l.validity.notAfter).getTime()<Date.now()?s([t=>{a.unlink(o.resolve(e),t)},e=>{a.unlink(o.resolve(t),e)}],e=>{if(e){console.log("Error while unlinking the certificate pair",e),n(e);return}i(r)}):i(!1)})})})}function v(e,t){return new Promise((r,i)=>{s([t=>{a.readFile(o.resolve(e),"utf8",(e,r)=>{if(e)return t(e);t(null,r)})},e=>{a.readFile(o.resolve(t),"utf8",(t,r)=>{if(t)return e(t);e(null,r)})}],(e,t)=>{e&&i(e),r({cert:t[0],key:t[1]})})})}i=t.proxyCertificateService={getCertificateAndKey:v,generateRootCAForProxy:function(e){return new Promise(async(t,r)=>{let n,s=o.resolve(e,"proxy"),c=o.resolve(s,"certificates"),l=o.resolve(c,"cert.json");try{a.existsSync(s)||a.mkdirSync(s),a.existsSync(c)||a.mkdirSync(c),a.existsSync(l)||a.writeFileSync(l,JSON.stringify({}),{flag:"wx"}),n=JSON.parse(a.readFileSync(l,"utf8")),await i.deleteCertificates(n,l,!1,!0);let e=await i.ensureRootCAPresence({keyBitSize:u.KEYBITSIZE,certOptions:{country:u.COUNTRY,days:u.DAYSTOEXPIRY,commonName:m,hash:u.HASH},locationMeta:{rootCALocation:s,certMapFile:l}},n);return t(e)}catch(e){return pm.logger.error("Error generating rootCA certificate for HTTPS proxy",e),r(e)}})},regenerateCertificates:async function e(e){let t=o.resolve(e,"proxy"),r=o.resolve(t,`${u.CA_SUFFIX_NAME}.crt`),n=o.resolve(t,`${u.CA_SUFFIX_NAME}.key`),s=o.resolve(t,`${u.CA_SUFFIX_NAME}.p12`);try{a.existsSync(r)&&a.unlinkSync(r),a.existsSync(n)&&a.unlinkSync(n),a.existsSync(s)&&a.unlinkSync(s),await i.generateRootCAForProxy(e)}catch(e){pm.logger.error("Error regenerating certificates: ",e)}},isRootCAValid:function(e){return new Promise((t,r)=>{let i=o.resolve(e,"postman-proxy-ca.crt");a.readFile(i,(e,r)=>{try{if(e)throw e;let i=d.pki.certificateFromPem(r).issuer.attributes,n=c.find(i,e=>"organizationName"===e.name);t(!n)}catch(e){e&&pm.logger.error("Main~Error while checking the contents of Root CA: ",e),t(!0)}})})},deleteCertificates:async function e(t,r,i=!1,n=!1){var o=[];let s=c.map(t,async(e,t)=>{try{if(i&&(o.push(t),a.unlinkSync(e.certFile),a.unlinkSync(e.keyFile)),n)return await S(e.certFile,e.keyFile,t)}catch(e){console.log(`Error processing certificate ${t}:`,e)}}),l=await Promise.allSettled(s);n&&c.forEach(l,e=>{"fulfilled"===e.status&&e.value&&o.push(e.value)}),c.forEach(o,e=>{delete t[e]}),a.writeFileSync(r,JSON.stringify(t,!0,2))},ensureRootCAPresence:g}},"./services/proxyCertificateUtil.js":function(e,t,r){let i=r("./node_modules/node-forge/lib/index.js"),{waterfall:n}=r("./node_modules/async/lib/async.js");function a(e){var t=parseInt(e[0],16);return t<8?e:(t-=8).toString()+e.substring(1)}e.exports={generateCert:(e,t,o,s)=>{try{if("linux"===process.platform)n([e=>{r("./node_modules/@postman/pem/dist/index.js").createCSR(o,(r,i)=>{let n,a;return r?(pm.logger.info("Error while creating csr",r),s(r)):(n="[req]\nreq_extensions = v3_req\n\n[v3_req]\nbasicConstraints = CA:FALSE\nkeyUsage = nonRepudiation, digitalSignature, keyEncipherment\nsubjectAltName = @alt_names\n\n[alt_names]\n"+(o.altNames&&o.altNames.join("\n")),a={serviceKey:t.keyPair.privateKey,serviceCertificate:t.keyPair.publicKey,csr:i.csr,clientKey:i.clientKey,days:t.days,config:n},e(r,a))})},(e,t)=>{r("./node_modules/@postman/pem/dist/index.js").createCertificate(e,(e,t)=>e?s(e):s(null,t))}]);else{let r=i.pki.privateKeyFromPem(t.keyPair.privateKey),n=i.pki.rsa.generateKeyPair(t.keySize),o=i.pki.createCertificate(),c=i.pki.certificateFromPem(t.keyPair.publicKey);o.publicKey=n.publicKey,o.serialNumber=a(i.util.bytesToHex(i.random.getBytesSync(9))),o.validity.notBefore=new Date,o.validity.notAfter=new Date,o.validity.notAfter.setDate(o.validity.notBefore.getDate()+t.days),o.setSubject(e),o.setIssuer(c.subject.attributes),o.setExtensions(t.extensions),o.sign(r,i.md.sha256.create());let l={clientKey:i.pki.privateKeyToPem(n.privateKey),public:i.pki.publicKeyToPem(n.publicKey),certificate:i.pki.certificateToPem(o)};return s(null,l)}}catch(e){return s(e)}},generateRootCa:(e,t,n,o)=>{try{if("linux"===process.platform){let e=r("./node_modules/@postman/pem/dist/index.js");pm.logger.info("Generated root certificate for linux"),e.createCertificate({...n,hash:"sha256",keyBitsize:t.keySize,selfSigned:!0,config:`[v3_req]
        basicConstraints = CA:TRUE`},(e,t)=>e?o(e):o(null,t))}else{let r=i.pki.rsa.generateKeyPair(t.keySize),n=i.pki.createCertificate();n.publicKey=r.publicKey,n.serialNumber=a(i.util.bytesToHex(i.random.getBytesSync(9))),n.validity.notBefore=new Date,n.validity.notAfter=new Date,n.validity.notAfter.setDate(n.validity.notBefore.getDate()+t.days),n.setSubject(e),n.setIssuer(e),n.setExtensions(t.extensions),n.sign(r.privateKey,i.md.sha256.create());let s={clientKey:i.pki.privateKeyToPem(r.privateKey),public:i.pki.publicKeyToPem(r.publicKey),certificate:i.pki.certificateToPem(n)};return o(null,s)}}catch(e){return o(e)}},getCertInfo:(e,t)=>{try{let r=i.pki.certificateFromPem(e);return t(null,r)}catch(e){return t(e)}}}}};