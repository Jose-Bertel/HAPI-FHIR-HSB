exports.ids=["services_devtoolsInstaller_js"],exports.modules={"./services/devtoolsConstants.js":function(e){e.exports={ListOfDevtools:[{name:"React Devtools",id:"fmkadmapgofadopljbjfkapdkoienihi"},{name:"Mobx Devtools",id:"pfgnfdagidkfgccljigdamigbcnndkod"}]}},"./services/devtoolsInstaller.js":function(e,t,o){let s=o("fs");o("https");let{app:n}=o("electron"),r=o("path"),i=o("./node_modules/unzip-crx-3/dist/index.js"),l=o("./services/devtoolsConstants.js");e.exports={init:function(e){let t=l.ListOfDevtools,o=[];for(let e in t)o.push((function e(t,o,l=5){let c=function(){let e=n.getPath("userData");return r.resolve(`${e}/extensions`)}();s.existsSync(c)||s.mkdirSync(c,{recursive:!0});let a=r.resolve(`${c}/${t}`),d=r.resolve(__dirname,`services/crx/${t}.crx`),f=r.resolve(`${a}.crx`);return new Promise((n,c)=>{!s.existsSync(a)||o?(s.existsSync(a)&&s.rmdirSync(a,{recursive:!0}),s.promises.copyFile(d,f).then(()=>{i(f,a).then(()=>{!function e(t,o){s.readdirSync(t).forEach(n=>{let i=r.join(t,n);s.chmodSync(i,parseInt(`${o}`,8)),s.statSync(i).isDirectory()&&e(i,o)})}(a,755),n(a)}).catch(e=>{if(!s.existsSync(r.resolve(a,"manifest.json")))return c(e)})}).catch(s=>{if(pm.logger.info(`Failed to fetch extension, trying ${l-1} more times`),l<=1)return c(s);setTimeout(()=>{e(t,o,l-1).then(n).catch(c)},200)})):n(a)})})(t[e].id,!1).then(o=>{pm.logger.info(`DevtoolsInstaller~Extension downloaded for ${t[e].name} at`,o)}).catch(o=>{pm.logger.info(`DevtoolsInstaller~Error occurred while downloading extension for ${t[e].name}`,o)}));Promise.allSettled(o).then(()=>(n.on("session-created",e=>{if(!e.isPersistent()||!n.isReady())return;let t=l.ListOfDevtools;for(let o in t)e.loadExtension(r.resolve(n.getPath("userData"),"extensions",t[o].id),{allowFileAccess:!0}).then(e=>{pm.logger.info("DevtoolsInstaller~Devtools loaded",e.name)}).catch(e=>{pm.logger.error("DevtoolsInstaller~Error ocurred while attaching devtools",e)})}),e(null)))}}}};