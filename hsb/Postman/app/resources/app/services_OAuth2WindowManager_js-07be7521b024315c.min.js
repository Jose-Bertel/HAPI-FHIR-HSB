exports.ids=["services_OAuth2WindowManager_js"],exports.modules={"./services/OAuth2WindowManager.js":function(e,o,t){let n=t("./node_modules/lodash/lodash.js"),r=t("electron").BrowserWindow,{isString:i}=t("./utils/utilities.js"),{DEFAULT_FONTS:s}=t("./constants/WindowConstants.js"),a=new Set([301,302,303,307,308]);class d{constructor(e={}){this.cookiePartitionId=e.cookiePartitionId,this.strictSSL=e.strictSSL,this.log=e.log}permissionRequestHandler(e,o,t){return t(!1)}async startLoginWith(e,o,d){let l=await Promise.all([t.e("vendors-node_modules_mime-types_index_js"),t.e("vendors-node_modules_postman-collection_index_js")]).then(t.t.bind(t,"./node_modules/postman-collection/index.js",23)).then(e=>e.default);if(i(e)&&(e=new l.Url(e)),"https"!==e.protocol&&"http"!==e.protocol){d&&d(Error("Invalid protocol for auth URL. Only HTTP and HTTPS protocol are allowed."));return}let c=new r({width:800,height:600,show:!1,title:"Postman OAuth 2.0",webPreferences:{contextIsolation:!0,partition:this.cookiePartitionId,defaultFontFamily:s[process.platform]}}),u=new l.Url(o.uri),g=u.host&&u.host.join("."),h=!(u.protocol&&u.host),p=!1,w={},m=function(e){let o=new l.Url(e);return o.host&&o.host.join(".")===g},f=(e,t={})=>{pm.logger.info("OAuth2WindowManager~startLoginWith - Received redirect on auth login window");let r=new l.Url(e),i=!1,s=new l.PropertyList(l.QueryParam,{},n.concat(r.query.toJSON(),l.QueryParam.parse(r.hash))),a,u=function(){p=!0,setTimeout(function(){c&&c.close()})},g=function(e){return Object.entries(e).reduce((e,[o,t])=>(Array.isArray(t)||(t=[t]),t.forEach(t=>{e.add({key:o,value:t})}),e),new l.HeaderList({},[]))};if(t.log){let e={redirect:t.redirect||!1,request:{url:t.url&&t.url.toString(),method:t.method||"GET"},response:{}};t.requestHeaders&&(e.request.headers=g(t.requestHeaders).toJSON()),t.responseHeaders&&(e.response.headers=g(t.responseHeaders).toJSON()),t.redirect?e.response.statusCode=t.responseCode:e.response.code=t.responseCode,this.log(e)}if(!h&&m(e)&&(h=!0),!h)return void pm.logger.info("OAuth2WindowManager~startLoginWith - URL did not match the registered callbackURL, so skipping");if(s.each(function(e){e&&(e.value=decodeURIComponent(e.value))}),a=s.find(e=>"error"===n.toLower(e.key))){u(),d(a.value,s.toObject());return}if(Array.isArray(o.params)&&(i=s.find(e=>{if(null!=e.key)return o.params.includes(e.key)})),i){pm.logger.info("OAuth2WindowManager~startLoginWith - Matched code/access_token. Closing auth login window now."),u(),d&&d(null,s.toObject());return}},L=function(e){try{let o=new URL(e);return`${o.protocol}//${o.host}`}catch(e){return"INVALID URL"}};t("./node_modules/@electron/remote/main/index.js").enable(c.webContents),c.on("close",function(){c.webContents.session.clearAuthCache({type:"",origin:""}),c=null,!p&&d&&d(Error("Authentication window was closed."))},!1),c.webContents.on("did-fail-load",function(e,o,t,r){if(pm.logger.info("OAuth2WindowManager~did-fail-load: Error with code ",o,t,L(r)),p)return;let i=n.get(e,["sender","history"]);n.some(i,e=>{if(m(e))return f(e),!0})||pm.logger.warn("OAuth2WindowManager~did-fail-load: No history URL matched with the callback URL")}),c.webContents.on("will-navigate",function(e,o){pm.logger.info("OAuth2WindowManager~will-navigate:",L(o)),p||f(o)}),c.webContents.on("did-navigate",function(e,o){pm.logger.info("OAuth2WindowManager~did-navigate:",L(o)),p||f(o)}),c.webContents.on("did-navigate-in-page",function(e,o){pm.logger.info("OAuth2WindowManager~did-navigate-in-page:",L(o)),p||f(o)}),n.invoke(c,"webContents.session.webRequest.onSendHeaders",e=>{p||"mainFrame"!==e.resourceType||Object.assign(w={},{log:!0,id:e.id,requestHeaders:e.requestHeaders||{}})}),n.invoke(c,"webContents.session.webRequest.onBeforeRedirect",e=>{pm.logger.info("OAuth2WindowManager~onBeforeRedirect:",L(e.redirectURL)),p||"mainFrame"!==e.resourceType||f(e.redirectURL)}),n.invoke(c,"webContents.session.webRequest.onHeadersReceived",function(e,o){if(p||"mainFrame"!==e.resourceType)return void o({cancel:!1});if(w.id&&w.id!==e.id&&(w={}),Object.assign(w,{log:!0,id:e.id,method:e.method,url:new l.Url(e.url),responseCode:e.statusCode,responseHeaders:e.responseHeaders||{},redirect:a.has(e.statusCode)}),pm.logger.info("OAuth2WindowManager~onHeadersReceived: Got response details for",L(e.url)),a.has(e.statusCode)){let o=e.responseHeaders.Location&&e.responseHeaders.Location[0]||e.responseHeaders.location&&e.responseHeaders.location[0];o&&(pm.logger.info("OAuth2WindowManager~onHeadersReceived: Redirection request to",L(o)),f(o,w))}else f(e.url,w);o({cancel:!1})}),c.webContents.on("certificate-error",function(e,o,t,n,r){pm.logger.info("OAuth2WindowManager~certificate-error:",t,L(o)),this.strictSSL?r(!1):(e.preventDefault(),r(!0))});let b=n.get(c,"webContents.session");b&&b.setPermissionRequestHandler(this.permissionRequestHandler),pm.logger.info("OAuth2WindowManager~startLoginWith - Opening auth login window",e.toString()),c.loadURL(e.toString()),c.show()}}e.exports={OAuth2WindowManager:d,initialize:function(){pm.eventBus.channel("oauth2-login").subscribe(({name:e,namespace:o,data:n})=>{"oauth2BrowserLogin"===o&&"startLogin"===e&&new d({cookiePartitionId:n.cookiePartitionId,strictSSL:n.strictSSL,log:e=>{pm.eventBus.channel("oauth2-login").publish({name:"log",namespace:"oauth2BrowserLogin",data:{id:n.id,payload:e}})}}).startLoginWith(n.url,n.matchOptions,(e,o)=>{let r=t("./node_modules/serialised-error/index.js");pm.eventBus.channel("oauth2-login").publish({name:"loginCallback",namespace:"oauth2BrowserLogin",data:{id:n.id,error:e&&new r(e),result:o}})})})}}}};